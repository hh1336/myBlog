// <auto-generated />
using System;
using Frame.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Frame.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(FrameDbContext))]
    [Migration("20190430032333_EditUserInfoEntity")]
    partial class EditUserInfoEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Frame.Core.Authorization.AccountRole", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("AccountId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("RoleId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("Frame.Core.Authorization.Permission", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("AccountId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<int>("ActionType");

                    b.Property<byte[]>("MenuId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("RoleId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Frame.Core.Authorization.Roles.Role", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<byte[]>("CreateUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime?>("DelTime");

                    b.Property<byte[]>("DelUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Describe");

                    b.Property<int>("IsSystemDefault");

                    b.Property<string>("RoleName");

                    b.Property<int>("RoleState");

                    b.Property<int>("SortDel");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<byte[]>("UpdateUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Frame.Core.Entitys.Account", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<int>("AccountState");

                    b.Property<DateTime>("CreateTime");

                    b.Property<byte[]>("CreateUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime?>("DelTime");

                    b.Property<byte[]>("DelUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("LastLoginIp");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<int>("LoginCount");

                    b.Property<string>("OldPassWord");

                    b.Property<string>("PassWord")
                        .IsRequired();

                    b.Property<int>("SortDel");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<byte[]>("UpdateUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("UserInfoId")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("ID");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Frame.Core.Entitys.AdminMenu", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreateTime");

                    b.Property<byte[]>("CreateUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime?>("DelTime");

                    b.Property<byte[]>("DelUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("IconAddress");

                    b.Property<int>("IsShow");

                    b.Property<int>("IsSystemDefault");

                    b.Property<string>("LinkAddress");

                    b.Property<string>("MenuName");

                    b.Property<byte[]>("Pid")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("ShowName");

                    b.Property<int>("SortDel");

                    b.Property<int>("SortNumber");

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<byte[]>("UpdateUser")
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.HasKey("ID");

                    b.HasIndex("Pid");

                    b.ToTable("AdminMenu");
                });

            modelBuilder.Entity("Frame.Core.Entitys.UserInfo", b =>
                {
                    b.Property<byte[]>("ID")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<string>("Address");

                    b.Property<int?>("Age");

                    b.Property<string>("Email");

                    b.Property<string>("Phone");

                    b.Property<string>("Photo");

                    b.Property<int>("Sex");

                    b.Property<int>("SortDel");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("Frame.Core.Authorization.AccountRole", b =>
                {
                    b.HasOne("Frame.Core.Entitys.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId");

                    b.HasOne("Frame.Core.Authorization.Roles.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Frame.Core.Authorization.Permission", b =>
                {
                    b.HasOne("Frame.Core.Entitys.Account", "Account")
                        .WithMany("Permissions")
                        .HasForeignKey("AccountId");

                    b.HasOne("Frame.Core.Entitys.AdminMenu", "AdminMenu")
                        .WithMany("Permissions")
                        .HasForeignKey("MenuId");

                    b.HasOne("Frame.Core.Authorization.Roles.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Frame.Core.Entitys.Account", b =>
                {
                    b.HasOne("Frame.Core.Entitys.UserInfo", "UserInfo")
                        .WithMany("Accounts")
                        .HasForeignKey("UserInfoId");
                });

            modelBuilder.Entity("Frame.Core.Entitys.AdminMenu", b =>
                {
                    b.HasOne("Frame.Core.Entitys.AdminMenu", "adminMenu")
                        .WithMany("AdminMenus")
                        .HasForeignKey("Pid");
                });
#pragma warning restore 612, 618
        }
    }
}
